/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as ContactsRouteImport } from './routes/contacts'
import { Route as IndexRouteImport } from './routes/index'
import { Route as ContactsIndexRouteImport } from './routes/contacts.index'
import { Route as ContactsNewRouteImport } from './routes/contacts.new'
import { Route as ContactsContactIdRouteImport } from './routes/contacts.$contactId'
import { Route as AuthLoginRouteImport } from './routes/_auth.login'
import { Route as ContactsContactIdEditRouteImport } from './routes/contacts.$contactId_.edit'

const ContactsRoute = ContactsRouteImport.update({
  id: '/contacts',
  path: '/contacts',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const ContactsIndexRoute = ContactsIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => ContactsRoute,
} as any)
const ContactsNewRoute = ContactsNewRouteImport.update({
  id: '/new',
  path: '/new',
  getParentRoute: () => ContactsRoute,
} as any)
const ContactsContactIdRoute = ContactsContactIdRouteImport.update({
  id: '/$contactId',
  path: '/$contactId',
  getParentRoute: () => ContactsRoute,
} as any)
const AuthLoginRoute = AuthLoginRouteImport.update({
  id: '/_auth/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const ContactsContactIdEditRoute = ContactsContactIdEditRouteImport.update({
  id: '/$contactId_/edit',
  path: '/$contactId/edit',
  getParentRoute: () => ContactsRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/contacts': typeof ContactsRouteWithChildren
  '/login': typeof AuthLoginRoute
  '/contacts/$contactId': typeof ContactsContactIdRoute
  '/contacts/new': typeof ContactsNewRoute
  '/contacts/': typeof ContactsIndexRoute
  '/contacts/$contactId/edit': typeof ContactsContactIdEditRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/login': typeof AuthLoginRoute
  '/contacts/$contactId': typeof ContactsContactIdRoute
  '/contacts/new': typeof ContactsNewRoute
  '/contacts': typeof ContactsIndexRoute
  '/contacts/$contactId/edit': typeof ContactsContactIdEditRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/contacts': typeof ContactsRouteWithChildren
  '/_auth/login': typeof AuthLoginRoute
  '/contacts/$contactId': typeof ContactsContactIdRoute
  '/contacts/new': typeof ContactsNewRoute
  '/contacts/': typeof ContactsIndexRoute
  '/contacts/$contactId_/edit': typeof ContactsContactIdEditRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/contacts'
    | '/login'
    | '/contacts/$contactId'
    | '/contacts/new'
    | '/contacts/'
    | '/contacts/$contactId/edit'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/login'
    | '/contacts/$contactId'
    | '/contacts/new'
    | '/contacts'
    | '/contacts/$contactId/edit'
  id:
    | '__root__'
    | '/'
    | '/contacts'
    | '/_auth/login'
    | '/contacts/$contactId'
    | '/contacts/new'
    | '/contacts/'
    | '/contacts/$contactId_/edit'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ContactsRoute: typeof ContactsRouteWithChildren
  AuthLoginRoute: typeof AuthLoginRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/contacts': {
      id: '/contacts'
      path: '/contacts'
      fullPath: '/contacts'
      preLoaderRoute: typeof ContactsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/contacts/': {
      id: '/contacts/'
      path: '/'
      fullPath: '/contacts/'
      preLoaderRoute: typeof ContactsIndexRouteImport
      parentRoute: typeof ContactsRoute
    }
    '/contacts/new': {
      id: '/contacts/new'
      path: '/new'
      fullPath: '/contacts/new'
      preLoaderRoute: typeof ContactsNewRouteImport
      parentRoute: typeof ContactsRoute
    }
    '/contacts/$contactId': {
      id: '/contacts/$contactId'
      path: '/$contactId'
      fullPath: '/contacts/$contactId'
      preLoaderRoute: typeof ContactsContactIdRouteImport
      parentRoute: typeof ContactsRoute
    }
    '/_auth/login': {
      id: '/_auth/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof AuthLoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/contacts/$contactId_/edit': {
      id: '/contacts/$contactId_/edit'
      path: '/$contactId/edit'
      fullPath: '/contacts/$contactId/edit'
      preLoaderRoute: typeof ContactsContactIdEditRouteImport
      parentRoute: typeof ContactsRoute
    }
  }
}

interface ContactsRouteChildren {
  ContactsContactIdRoute: typeof ContactsContactIdRoute
  ContactsNewRoute: typeof ContactsNewRoute
  ContactsIndexRoute: typeof ContactsIndexRoute
  ContactsContactIdEditRoute: typeof ContactsContactIdEditRoute
}

const ContactsRouteChildren: ContactsRouteChildren = {
  ContactsContactIdRoute: ContactsContactIdRoute,
  ContactsNewRoute: ContactsNewRoute,
  ContactsIndexRoute: ContactsIndexRoute,
  ContactsContactIdEditRoute: ContactsContactIdEditRoute,
}

const ContactsRouteWithChildren = ContactsRoute._addFileChildren(
  ContactsRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ContactsRoute: ContactsRouteWithChildren,
  AuthLoginRoute: AuthLoginRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
