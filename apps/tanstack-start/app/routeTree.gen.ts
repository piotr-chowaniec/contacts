/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as AuthedImport } from './routes/_authed'
import { Route as IndexImport } from './routes/index'
import { Route as AuthedContactsImport } from './routes/_authed/contacts'
import { Route as AuthLoginImport } from './routes/_auth.login'
import { Route as AuthedContactsIndexImport } from './routes/_authed/contacts.index'
import { Route as AuthedContactsNewImport } from './routes/_authed/contacts.new'
import { Route as AuthedContactsContactIdImport } from './routes/_authed/contacts.$contactId'
import { Route as AuthedContactsContactIdEditImport } from './routes/_authed/contacts.$contactId_.edit'

// Create/Update Routes

const AuthedRoute = AuthedImport.update({
  id: '/_authed',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const AuthedContactsRoute = AuthedContactsImport.update({
  id: '/contacts',
  path: '/contacts',
  getParentRoute: () => AuthedRoute,
} as any)

const AuthLoginRoute = AuthLoginImport.update({
  id: '/_auth/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const AuthedContactsIndexRoute = AuthedContactsIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AuthedContactsRoute,
} as any)

const AuthedContactsNewRoute = AuthedContactsNewImport.update({
  id: '/new',
  path: '/new',
  getParentRoute: () => AuthedContactsRoute,
} as any)

const AuthedContactsContactIdRoute = AuthedContactsContactIdImport.update({
  id: '/$contactId',
  path: '/$contactId',
  getParentRoute: () => AuthedContactsRoute,
} as any)

const AuthedContactsContactIdEditRoute =
  AuthedContactsContactIdEditImport.update({
    id: '/$contactId_/edit',
    path: '/$contactId/edit',
    getParentRoute: () => AuthedContactsRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/_authed': {
      id: '/_authed'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthedImport
      parentRoute: typeof rootRoute
    }
    '/_auth/login': {
      id: '/_auth/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof AuthLoginImport
      parentRoute: typeof rootRoute
    }
    '/_authed/contacts': {
      id: '/_authed/contacts'
      path: '/contacts'
      fullPath: '/contacts'
      preLoaderRoute: typeof AuthedContactsImport
      parentRoute: typeof AuthedImport
    }
    '/_authed/contacts/$contactId': {
      id: '/_authed/contacts/$contactId'
      path: '/$contactId'
      fullPath: '/contacts/$contactId'
      preLoaderRoute: typeof AuthedContactsContactIdImport
      parentRoute: typeof AuthedContactsImport
    }
    '/_authed/contacts/new': {
      id: '/_authed/contacts/new'
      path: '/new'
      fullPath: '/contacts/new'
      preLoaderRoute: typeof AuthedContactsNewImport
      parentRoute: typeof AuthedContactsImport
    }
    '/_authed/contacts/': {
      id: '/_authed/contacts/'
      path: '/'
      fullPath: '/contacts/'
      preLoaderRoute: typeof AuthedContactsIndexImport
      parentRoute: typeof AuthedContactsImport
    }
    '/_authed/contacts/$contactId_/edit': {
      id: '/_authed/contacts/$contactId_/edit'
      path: '/$contactId/edit'
      fullPath: '/contacts/$contactId/edit'
      preLoaderRoute: typeof AuthedContactsContactIdEditImport
      parentRoute: typeof AuthedContactsImport
    }
  }
}

// Create and export the route tree

interface AuthedContactsRouteChildren {
  AuthedContactsContactIdRoute: typeof AuthedContactsContactIdRoute
  AuthedContactsNewRoute: typeof AuthedContactsNewRoute
  AuthedContactsIndexRoute: typeof AuthedContactsIndexRoute
  AuthedContactsContactIdEditRoute: typeof AuthedContactsContactIdEditRoute
}

const AuthedContactsRouteChildren: AuthedContactsRouteChildren = {
  AuthedContactsContactIdRoute: AuthedContactsContactIdRoute,
  AuthedContactsNewRoute: AuthedContactsNewRoute,
  AuthedContactsIndexRoute: AuthedContactsIndexRoute,
  AuthedContactsContactIdEditRoute: AuthedContactsContactIdEditRoute,
}

const AuthedContactsRouteWithChildren = AuthedContactsRoute._addFileChildren(
  AuthedContactsRouteChildren,
)

interface AuthedRouteChildren {
  AuthedContactsRoute: typeof AuthedContactsRouteWithChildren
}

const AuthedRouteChildren: AuthedRouteChildren = {
  AuthedContactsRoute: AuthedContactsRouteWithChildren,
}

const AuthedRouteWithChildren =
  AuthedRoute._addFileChildren(AuthedRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '': typeof AuthedRouteWithChildren
  '/login': typeof AuthLoginRoute
  '/contacts': typeof AuthedContactsRouteWithChildren
  '/contacts/$contactId': typeof AuthedContactsContactIdRoute
  '/contacts/new': typeof AuthedContactsNewRoute
  '/contacts/': typeof AuthedContactsIndexRoute
  '/contacts/$contactId/edit': typeof AuthedContactsContactIdEditRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '': typeof AuthedRouteWithChildren
  '/login': typeof AuthLoginRoute
  '/contacts/$contactId': typeof AuthedContactsContactIdRoute
  '/contacts/new': typeof AuthedContactsNewRoute
  '/contacts': typeof AuthedContactsIndexRoute
  '/contacts/$contactId/edit': typeof AuthedContactsContactIdEditRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/_authed': typeof AuthedRouteWithChildren
  '/_auth/login': typeof AuthLoginRoute
  '/_authed/contacts': typeof AuthedContactsRouteWithChildren
  '/_authed/contacts/$contactId': typeof AuthedContactsContactIdRoute
  '/_authed/contacts/new': typeof AuthedContactsNewRoute
  '/_authed/contacts/': typeof AuthedContactsIndexRoute
  '/_authed/contacts/$contactId_/edit': typeof AuthedContactsContactIdEditRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | ''
    | '/login'
    | '/contacts'
    | '/contacts/$contactId'
    | '/contacts/new'
    | '/contacts/'
    | '/contacts/$contactId/edit'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | ''
    | '/login'
    | '/contacts/$contactId'
    | '/contacts/new'
    | '/contacts'
    | '/contacts/$contactId/edit'
  id:
    | '__root__'
    | '/'
    | '/_authed'
    | '/_auth/login'
    | '/_authed/contacts'
    | '/_authed/contacts/$contactId'
    | '/_authed/contacts/new'
    | '/_authed/contacts/'
    | '/_authed/contacts/$contactId_/edit'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AuthedRoute: typeof AuthedRouteWithChildren
  AuthLoginRoute: typeof AuthLoginRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthedRoute: AuthedRouteWithChildren,
  AuthLoginRoute: AuthLoginRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/_authed",
        "/_auth/login"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/_authed": {
      "filePath": "_authed.tsx",
      "children": [
        "/_authed/contacts"
      ]
    },
    "/_auth/login": {
      "filePath": "_auth.login.tsx"
    },
    "/_authed/contacts": {
      "filePath": "_authed/contacts.tsx",
      "parent": "/_authed",
      "children": [
        "/_authed/contacts/$contactId",
        "/_authed/contacts/new",
        "/_authed/contacts/",
        "/_authed/contacts/$contactId_/edit"
      ]
    },
    "/_authed/contacts/$contactId": {
      "filePath": "_authed/contacts.$contactId.tsx",
      "parent": "/_authed/contacts"
    },
    "/_authed/contacts/new": {
      "filePath": "_authed/contacts.new.tsx",
      "parent": "/_authed/contacts"
    },
    "/_authed/contacts/": {
      "filePath": "_authed/contacts.index.tsx",
      "parent": "/_authed/contacts"
    },
    "/_authed/contacts/$contactId_/edit": {
      "filePath": "_authed/contacts.$contactId_.edit.tsx",
      "parent": "/_authed/contacts"
    }
  }
}
ROUTE_MANIFEST_END */
